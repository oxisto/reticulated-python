/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
/*
 * Copyright (c) 2020, Christian Banse and Andreas Hager. All rights reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */
package io.github.oxisto.reticulated

import io.github.oxisto.reticulated.ast.FileInput
import io.github.oxisto.reticulated.ast.Scope
import io.github.oxisto.reticulated.ast.Visitor
import io.github.oxisto.reticulated.grammar.Python3Lexer
import io.github.oxisto.reticulated.grammar.Python3Parser
import org.antlr.v4.runtime.CharStreams
import org.antlr.v4.runtime.CommonTokenStream
import org.antlr.v4.runtime.ParserRuleContext
import org.antlr.v4.runtime.tree.ParseTree

class PythonParser {

  fun parse(path: String): ParserResult {

    val inputStream = CharStreams.fromFileName(path)
    val lexer = Python3Lexer(inputStream)
    val tokenStream = CommonTokenStream(lexer)
    val parser = Python3Parser(tokenStream)

    val ctx = parser.file_input()

    explore(ctx, 0)

    // new global scope
    val global = Scope()

    val fileInput = ctx.accept(Visitor(global)) as FileInput

    return ParserResult(fileInput, global)
  }

  private fun explore(node: ParseTree, indent: Int) {
    println("%s%s -> %s".format(" ".repeat(indent), node.javaClass.simpleName, node.text))

    if (node is ParserRuleContext) {
      node.children?.let {
        for (child in it) {
          explore(child, indent + 2)
        }
      }
    }
  }
}
